Dominio -> Repositorio -> Serviço -> Controlador

De preferencia para fazer o modelo nesse sentido. Cada entidade deve ter seu modelo em todas as etapas.


    DOMINIO
No dominio deve declarar todas os atributos e medodos get/set indicando chave primaria - auto increment. 
Não esquecer do relacionamento entre classes

    AS ANOTAÇÕES DAMAIN
@Data  &  @NoArgsConstructor   //ELIMINA A necessidade de criar construtor e get/set SEMPRE USADO EM CONJUNTO COM A DEPENDENCIA LOMBOK
@Entity   // é utilizada para informar que uma classe também é uma entidade.
implements Serializable   // inserido no nome da classe (interface)
private static final long serialVersionUID = 1L   // SEM NECESSIDADE DE INSERIR sempre é usado dessa forma, logo abaixo da linha da classe 
@Id   //atributo de uma entidade estará relacionado à chave primária da respectiva tabela no banco de dados. 
@GeneratedValue(strategy = GenerationType.IDENTITY)   // Para que a geração de ids seja controlada pelo provedor de persistência (Hibernate, por exemplo), 


///////////////////////////////////////////////////////////----------------------------------------//////////////////////////////////////////////////////////////////////

        REPOSITORIO

@Repositorio // deve ser colocado em cada para que o hibernet o identifique como tal
os repositorios são interfaces 
classe extends CrudRepository <nomeClasse,  Integer>
Comunica com o banco de dados

FindAll é um metodo, exemplo, de metodo interable 

  @Override      //anotação necessaria 
List<CLASSE> FindAll(); //converter de interable para LIST

/////////////////////////////////////////////////////////----------------------------------------------//////////////////////////////////////

        SERVICE

@Service //deve ser colocado em cada uma das entidades





/////////////////////////////////////////////////////////////////////////////////-----------------------------------//////////////////////////////////////////////////////////
Controlador faz requisição para servico. Em serviço temos que ter todos os metodos  requisitados pelo controlado




//////////
https://docs.spring.io/spring-framework/docs/5.3.16/reference/html/web.html#mvc-ann-requestmapping

METODOS

    CRUD
CREAT - POST
READ - GET 
UPDATE - PUT
DELETE - DELETE

PATCH() ATUALIZA SOMENTE UM atributo
PUT() ATUALIZA TODO FORMULARIO





REFERENCIAS

https://angoti.github.io/spring2/index.html#1



aplication propriets

logging.level.web=trace

spring.jpa.show-sql=true

spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.username=sa
spring.datasource.password=
